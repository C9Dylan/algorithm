package datastructure.tree;

/**
 * Created by Kim QQ.Cong on 2019-11-27 / 20:40
 *
 * @author: CongQingquan
 * @Description: 树
 */
public class Test {

    /**
     * 二叉树: 描述数据之间的一对多的关系. 详细百度查询.
     *
     * 树的分类:
     *
     * 1、二叉树(Binary tree): 百度
     *
     * 2、二叉搜索/排序树(Binary search/sort tree):
     *
     *      有顺序的存储. 若中序遍历则是一个有序列表. 且因为这种存储规则, 大大提高了查询速度. 因为每次对某个结点比较后,
     *      与比较结点的值不等于的情况下, 要么继续和该节点的左子树继续比较, 要么和右子树比较. 每次比较后都会过滤一半
     *      的比较结点, 与二分查找相似. 查询速度为0(log2n)
     *
     *      但是如果结点数据的分布是不均衡的, 比如添加一组数据: 1, 2, 3, 4, 5. 会造成没有左子树, 反而是以一条斜线
     *      的形式存储, 元素都存储在右子树上. 那么只考虑最极端的情况下, 查询5. 那么就需要查询5次.
     *      查询速度从O(log2n)降低到了O(n).
     *
     * 3、平衡树: 基于二叉排序树, 但是进行了优化. 即结点的分布是均衡的, 子树之间的高度不会相差很多. 保持查询速度为0(log2n).
     *
     *      部分实现保持均衡的算法:
     *          1) AVL:
     *          2) 红黑树:
     *
     * 5、B树:
     *
     * 6、B+树:
     */
}